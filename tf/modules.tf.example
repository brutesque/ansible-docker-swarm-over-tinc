### Instances

module "digitalocean" {
  source              = "./digitalocean"
  ssh_public_key_path = var.ssh_public_key_path
  api_key             = var.do_token
  project_name        = var.project_name
  instances           = var.digitalocean_instances
}
module "hetzner" {
  source              = "./hetzner"
  ssh_public_key_path = var.ssh_public_key_path
  api_key             = var.hetzner_token
  project_name        = var.project_name
  instances           = var.hetzner_instances
}

module "oraclecloud" {
  source                        = "./oraclecloud"
  ssh_public_key_path           = var.ssh_public_key_path
  user_ocid                     = var.oci_user_ocid
  api_key_fingerprint           = var.oci_api_key_fingerprint
  tenancy_ocid                  = var.oci_tenancy_ocid
  region                        = var.oci_region
  api_private_key_path          = var.oci_api_private_key_path
  compartment_ocid              = var.oci_compartment_ocid
  free_tier_availability_domain = var.oci_free_tier_availability_domain
  project_name                  = var.project_name
  instances                     = var.oraclecloud_instances
}

module "transip" {
  source              = "./transip"
  ssh_public_key_path = var.ssh_public_key_path
  account_name        = var.transip_account_name
  private_key         = trimspace(file(var.transip_private_key_path))
  project_name        = var.project_name
  instances           = var.transip_instances
  existing_instances  = var.existing_transip_instances
}

module "vultr" {
  source              = "./vultr"
  ssh_public_key_path = var.ssh_public_key_path
  api_key             = var.vultr_token
  project_name        = var.project_name
  instances           = var.vultr_instances
}

module "onpremise" {
  source    = "./onpremise"
  instances = var.prem_instances
}

locals {
  instances             = {
    digitalocean = module.digitalocean.instances,
    hetzner      = module.hetzner.instances,
    oraclecloud  = module.oraclecloud.instances,
    transip      = module.transip.instances,
    vultr        = module.vultr.instances,
    onpremise    = module.onpremise.instances,
  }
  merged_instances      = merge(values(local.instances)...)
  selection_order       = distinct(flatten([for i in range(max([for provider in keys(local.instances) : length(local.instances[provider])]...)) : [for hosts in [for provider in keys(local.instances) : keys(local.instances[provider])] : element(hosts, i) if length(hosts) > 0]]))
  manager_candidates    = distinct(concat(flatten([for i in range(max([for provider in var.manager_providers : length(local.instances[provider])]...)) : [for hosts in [for provider in var.manager_providers : keys(local.instances[provider])] : element(hosts, i) if length(hosts) > 0]]), local.selection_order))
  worker_candidates     = setsubtract(local.selection_order, local.managers)
  entrypoint_candidates = distinct(concat(flatten([for i in range(max([for provider in var.entrypoint_providers : length(local.instances[provider])]...)) : [for hosts in [for provider in var.entrypoint_providers : keys(local.instances[provider])] : element(hosts, i) if length(hosts) > 0]]), local.selection_order))
  managers              = slice(local.manager_candidates, 0, min(var.manager_count, length(local.manager_candidates)))
  workers               = [for host in local.selection_order : host if contains(local.worker_candidates, host)]
  entrypoints           = slice(local.entrypoint_candidates, 0, min(var.entrypoint_count, length(local.entrypoint_candidates)))
  leader                = local.merged_instances[local.managers[0]]
}

### DNS records

module "cloudflare" {
  source       = "./cloudflare"
  api_token    = var.cloudflare_api_token
  domain_names = var.cloudflare_domains
  entrypoints  = [for hostname in local.entrypoints : local.merged_instances[hostname]]
  subdomain    = var.services_subdomain
  leader       = local.leader
}

module "transip_dns" {
  source       = "./transip_dns"
  account_name = var.transip_account_name
  private_key  = trimspace(file(var.transip_private_key_path))
  domain_names = var.transip_domains
  entrypoints  = [for hostname in local.entrypoints : local.merged_instances[hostname]]
  subdomain    = var.services_subdomain
  leader       = local.leader
}

locals {
  domain_names        = {
    manual     = var.manual_domains,
    cloudflare = module.cloudflare.domain_names,
    transip    = module.transip_dns.domain_names,
  }
  merged_domain_names = distinct(concat([var.main_domain], values(local.domain_names)...))
}
