---

- include_tasks: firewall.yml

- name: Init a new swarm with default parameters
  docker_swarm:
      state: present
      advertise_addr: "{{ docker_swarm_interface }}"
  register: swarm_info
  when: inventory_hostname == groups['managers'][0]

- set_fact:
    docker_swarm_address: "{{ hostvars[groups['managers'][0]].vpn_ip }}"
    manager_token: "{{ hostvars[groups['managers'][0]].swarm_info.swarm_facts.JoinTokens.Manager }}"
    worker_token: "{{ hostvars[groups['managers'][0]].swarm_info.swarm_facts.JoinTokens.Worker }}"

- name: Add manager nodes
  docker_swarm:
    state: join
    join_token: "{{ manager_token }}"
    remote_addrs: "{{ docker_swarm_address }}"
    advertise_addr: "{{ docker_swarm_interface }}"
  when: "'managers' in group_names"

- name: Add worker nodes
  docker_swarm:
    state: join
    join_token: "{{ worker_token }}"
    remote_addrs: "{{ docker_swarm_address }}"
    advertise_addr: "{{ docker_swarm_interface }}"
  when: "'workers' in group_names"

- name: Add labels to nodes set in the inventory
  docker_node:
    hostname: "{{ hostvars[item]['ansible_hostname'] }}"
    labels: "{{ hostvars[item]['swarm_labels'] |default({}) }}"
  loop: "{{ ansible_play_batch }}"
  when: inventory_hostname in groups['swarm']
  run_once: true

- set_fact:
    nodes_labels: "{{ nodes_labels | default([])}} + {{ groups[item] | product([providers_labels[item]]) }}"
  with_items: "{{ groups.keys() | intersect(providers_labels.keys()) }}"
  run_once: true

- name: Add labels to nodes about their provider
  docker_node:
    hostname: "{{ item[0] }}"
    labels: "{{ item[1] |default({}) }}"
  loop: "{{ nodes_labels | default([]) }}"
  when: inventory_hostname in groups['managers']
  run_once: true

- name: Add labels to nodes about their storage mounts
  docker_node:
    hostname: "{{ inventory_hostname }}"
    labels: "{
      'storage.available': 'true',
      'storage.default': '{{ (item.mount | basename)[8:] }}',
      'storage.{{ (item.mount | basename)[8:] }}': 'true',
      'storage.{{ (item.mount | basename)[8:] }}.mount': '{{ item.mount }}',
      'storage.{{ (item.mount | basename)[8:] }}.size': '{{ item.size_total | filesizeformat }}',
      'storage.{{ (item.mount | basename)[8:] }}.uuid': '{{ item.uuid }}',
      'storage.{{ (item.mount | basename)[8:] }}.fstype': '{{ item.fstype }}',
    }"
  when: item["uuid"] in mount_uuids
  loop: "{{ ansible_mounts }}"
  no_log: true
